#!/usr/bin/env python3
import os
import yaml

# NOTE: Naming used:
# - Item: a folder containing a manifest, images, maybe other stuff in the future
# - Collection: a folder containing items 

# NOTE: explicitly not listing os.listdir("assets") since a collection folder may not be under assets (may be nested) 
COLLECTION_PATHS = [
    "assets/gtk-themes",
    "assets/icons",
    "assets/dotfiles"
]

ALLOWED_IMG_EXTENSIONS = ['.png', '.jpg', '.jpeg', '.webp']

def item_to_js_object(item_path):
    
    js_object = '\t{\n'

    try:
        with open(f"{item_path}/manifest.yaml", "r") as manifest:
            yaml_dict = yaml.safe_load(manifest)
            for key in yaml_dict:
                if key == 'images':
                    raise Exception("Please remove \'images\' field in YAML file. It is auto generated by this script already.")

                value = yaml_dict[key]
                if type(value) is list:
                    js_object += '\t\t' + key + ': ' + str(value) + ',\n'

                elif type(value) is str:
                    if key == 'title' or key == 'author' or key == 'description':
                        # Escape apostrophe and quotas in title author and description fields
                        value = value.replace('"', '\\\"').replace("'", "\\\'")
                    js_object += '\t\t' + key + ': "' + value + '",\n'

                else:
                    raise Exception("YAML item not currently supported. Please implement a conversion YAML -> js object in this script.")

    except yaml.YAMLError as e:
        print(e)
    except Exception as e:
        print(e)
    except:
        pass

    images = []
    for filename in sorted(os.listdir(item_path)):
        complete_path = f"{item_path}/{filename}"
        f_name, f_ext = os.path.splitext(filename) 

        if os.path.isfile(complete_path) and f_ext in ALLOWED_IMG_EXTENSIONS:
            if f_name == 'thumbnail':
                images = [complete_path] + images # Prepend so that 'thumbnail' file is first in the list
            else:
                images.append(complete_path)

    js_object += '\t\t' + 'images: ' + str(images) + ',\n'

    # -2 is to remove newline and comma from last added line
    js_object = js_object[:-2] + '\n\t}'

    return js_object



def collection_to_js_file(collection_path, js_file_path, js_array_name):
    
    js_file_content = f"const {js_array_name} = [\n"

    for item in os.listdir(collection_path):
        item_complete_path = f"{collection_path}/{item}"
        if os.path.isdir(item_complete_path):
            js_file_content += item_to_js_object(item_complete_path) + ',\n'

    # -2 is to remove newline and comma from last added object
    js_file_content = js_file_content[:-2] + '\n]'

    # Export the array in js
    js_file_content += f"\n\nexport {{{js_array_name}}};"

    with open(js_file_path, "w", encoding="utf8") as js_file:
        js_file.write(js_file_content)



def main():
    for collection_path in COLLECTION_PATHS:

        collection_name = os.path.basename(collection_path)
        js_file_path = f"js/assets/{collection_name}.js"
        js_array_name = collection_name.replace('-', '')

        collection_to_js_file(collection_path, js_file_path, js_array_name)



if __name__ == "__main__":
    main()
